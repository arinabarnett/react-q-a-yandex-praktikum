import React from 'react'
import ReactDOM from 'react-dom'
import { BrowserRouter as Router } from 'react-router-dom'
import { Provider } from 'react-redux'
import { createStore, applyMiddleware } from 'redux'
import thunk from 'redux-thunk'
import { createLogger } from 'redux-logger'
import reducer from './reducers'
import App from './components/app/app.jsx'
import registerServiceWorker from './registerServiceWorker'

const middleware = [thunk]
if (process.env.NODE_ENV !== 'production') {
  middleware.push(createLogger())
}

const store = createStore(reducer, applyMiddleware(...middleware))

ReactDOM.render(
  <Provider store={store}>
    <Router>
      <App />
    </Router>
  </Provider>,
  document.getElementById('root')
)
registerServiceWorker()

/* Q&A:

- Можно ли упростить инфраструктуру проекта? Как бы вы посоветовали ее реорганизовать?

В принципе довольно стандартная, корректная инфраструктура проекта, папка components — отвечает за хранение всех компонентов,
containers - содержит компоненты, которые осуществляют менеджмент стейта и диспатчинг экшнов и т.п 
Можно посоветовать избегать черезмерной вложенности при дальнейшей разработке проекта. Также, как правило, файлы, 
которые часто изменяются вместе, следует держать ближе друг к другу, по принципу "совместного размещения"

- Корректно ли написаны тесты для компонент? Корректно ли валидируются пропсы?

В проекте присутствует тестирование снэпшота для компонента App, тест написан корректно и благодаря этому нам не нужно тратить
много времени на тестирование, ведь если snapshot не совпадает то это значит, что мы получим ошибку при сравнении snapshots.
Однако для других компонентов и роутов приложения тесты отсутствуют. 

Также в проекте мы используем только snapshot testing, однако, когда приложение начнет разрастаться, такого подхода будет 
недостаточно. Необходимо будет также использовать "сквозные" тесты, которые полезны при тестировании длинных последовательностей 
действий. Например, будет необходмио протестировать рендеринг всего приложения в браузере, получение данных из API, 
переходы по ссылкам и т.п, проверить вероятный результат не только состояния DOM, но и сохранения данных.

Не во всех компонентах пропсы валидируются корректно, например, в компоненте Profile для валидации используется .proptypes, 
и соответственно пропсы некорректно валидируются, т.к необходимо использовать propTypes (propTypes через camelCase). В
ProfileContainer отстутствует валидация для пропса user, в NotFound отстутствует валидация пропса data, который в принципе
не используется внутри компонента 

- Корректно ли выполняется рендер компонент?

В целом, рендер компонент выполняется корректно

- Правильно ли настроены все роуты, в том числе и защищенные?

Переходы по роутам работают только внутри страницы, соответственно, при запуске проекта, если ввести в браузере к примеру:
http://localhost:3000/profile, появится ошибка "Cannot GET /profile", аналогично для других роутов. Т.к 
браузер пытается отправить запрос на /profile и т.д и в проекте нет полноценного бэкэнда, переход не происходит.
Для решения этой проблемы можно воспользоваться devServer.historyApiFallback при конфигурации вэбпака

https://webpack.js.org/configuration/dev-server/#devserverhistoryapifallback

Также, хочется отметить, что, если url "битый" - не происходит редирект на `/kvazavr`, как указано в задании.
В остальном все хорошо, роуты настроены корректно, защищенные в том числе.

- Оптимально ли написаны компоненты? Правильно ли выделены функциональные компоненты?

На мой взгляд, немного переусложнен компонент Login, можно реорганизовать его структуру так, чтобы Login стал
функциональным компонентом.

- Корректно ли описаны `Actions`, `Reducers`?

В редьюсере в случае LOGOUT нет необходимости возвращать пропсы user и errorMessage, можно просто вернуть initialState,
тем самым сократив количество кода.
В экшене в случае LOG_IN_FAILURE при диспатче 'error: true' не используется. В остальном, все гуд. 

*/